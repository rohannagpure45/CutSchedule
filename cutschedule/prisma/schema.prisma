// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  googleId  String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model WorkingHours {
  id        String  @id @default(cuid())
  dayOfWeek Int     @unique // 0-6 (Sunday-Saturday)
  startTime String  // "09:00"
  endTime   String  // "18:00"
  isActive  Boolean @default(true)
}

model AvailableSlot {
  id        String   @id @default(cuid())
  date      DateTime
  startTime String   // Required - when this slot starts
  endTime   String   // Required - when this slot ends
  reason    String?  // Optional - e.g., "Extended hours", "Special availability"
  createdAt DateTime @default(now())

  @@index([date])
}

model Appointment {
  id            String   @id @default(cuid())
  clientName    String
  phoneNumber   String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        String   @default("confirmed") // confirmed, cancelled, completed
  googleEventId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([phoneNumber])
  @@index([date])
  @@index([status])
}

model SMSLog {
  id            String   @id @default(cuid())
  appointmentId String
  phoneNumber   String
  messageType   String   // confirmation, reminder_1day, reminder_1hour, reschedule_2weeks, reschedule_3weeks
  sentAt        DateTime @default(now())
  status        String   // sent, failed
  twilioSid     String?

  @@index([appointmentId])
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  adminId       String?   // Reference to Admin.id for admin users
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
